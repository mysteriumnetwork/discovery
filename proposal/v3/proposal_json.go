// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v3

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	big "math/big"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV3(in *jlexer.Lexer, out *Quality) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quality":
			out.Quality = float64(in.Float64())
		case "latency":
			out.Latency = float64(in.Float64())
		case "bandwidth":
			out.Bandwidth = float64(in.Float64())
		case "uptime":
			out.Uptime = float64(in.Float64())
		case "packetLoss":
			out.PacketLoss = float64(in.Float64())
		case "monitoring_failed":
			out.MonitoringFailed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV3(out *jwriter.Writer, in Quality) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quality\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Quality))
	}
	{
		const prefix string = ",\"latency\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latency))
	}
	{
		const prefix string = ",\"bandwidth\":"
		out.RawString(prefix)
		out.Float64(float64(in.Bandwidth))
	}
	{
		const prefix string = ",\"uptime\":"
		out.RawString(prefix)
		out.Float64(float64(in.Uptime))
	}
	{
		const prefix string = ",\"packetLoss\":"
		out.RawString(prefix)
		out.Float64(float64(in.PacketLoss))
	}
	if in.MonitoringFailed {
		const prefix string = ",\"monitoring_failed\":"
		out.RawString(prefix)
		out.Bool(bool(in.MonitoringFailed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Quality) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Quality) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Quality) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Quality) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV3(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV31(in *jlexer.Lexer, out *ProposalUnregisterMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "proposal":
			(out.Proposal).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV31(out *jwriter.Writer, in ProposalUnregisterMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"proposal\":"
		out.RawString(prefix[1:])
		(in.Proposal).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProposalUnregisterMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProposalUnregisterMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProposalUnregisterMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProposalUnregisterMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV31(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV32(in *jlexer.Lexer, out *ProposalPingMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "proposal":
			(out.Proposal).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV32(out *jwriter.Writer, in ProposalPingMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"proposal\":"
		out.RawString(prefix[1:])
		(in.Proposal).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProposalPingMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProposalPingMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProposalPingMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProposalPingMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV32(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV33(in *jlexer.Lexer, out *Proposal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "format":
			out.Format = string(in.String())
		case "compatibility":
			out.Compatibility = int(in.Int())
		case "provider_id":
			out.ProviderID = string(in.String())
		case "service_type":
			out.ServiceType = string(in.String())
		case "location":
			(out.Location).UnmarshalEasyJSON(in)
		case "contacts":
			if in.IsNull() {
				in.Skip()
				out.Contacts = nil
			} else {
				in.Delim('[')
				if out.Contacts == nil {
					if !in.IsDelim(']') {
						out.Contacts = make([]Contact, 0, 2)
					} else {
						out.Contacts = []Contact{}
					}
				} else {
					out.Contacts = (out.Contacts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Contact
					(v1).UnmarshalEasyJSON(in)
					out.Contacts = append(out.Contacts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "access_policies":
			if in.IsNull() {
				in.Skip()
				out.AccessPolicies = nil
			} else {
				in.Delim('[')
				if out.AccessPolicies == nil {
					if !in.IsDelim(']') {
						out.AccessPolicies = make([]AccessPolicy, 0, 2)
					} else {
						out.AccessPolicies = []AccessPolicy{}
					}
				} else {
					out.AccessPolicies = (out.AccessPolicies)[:0]
				}
				for !in.IsDelim(']') {
					var v2 AccessPolicy
					(v2).UnmarshalEasyJSON(in)
					out.AccessPolicies = append(out.AccessPolicies, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "quality":
			(out.Quality).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV33(out *jwriter.Writer, in Proposal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"compatibility\":"
		out.RawString(prefix)
		out.Int(int(in.Compatibility))
	}
	{
		const prefix string = ",\"provider_id\":"
		out.RawString(prefix)
		out.String(string(in.ProviderID))
	}
	{
		const prefix string = ",\"service_type\":"
		out.RawString(prefix)
		out.String(string(in.ServiceType))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"contacts\":"
		out.RawString(prefix)
		if in.Contacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Contacts {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.AccessPolicies) != 0 {
		const prefix string = ",\"access_policies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.AccessPolicies {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"quality\":"
		out.RawString(prefix)
		(in.Quality).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Proposal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Proposal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Proposal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Proposal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV33(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV34(in *jlexer.Lexer, out *Price) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "per_hour":
			if in.IsNull() {
				in.Skip()
				out.PerHour = nil
			} else {
				if out.PerHour == nil {
					out.PerHour = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PerHour).UnmarshalJSON(data))
				}
			}
		case "per_gib":
			if in.IsNull() {
				in.Skip()
				out.PerGiB = nil
			} else {
				if out.PerGiB == nil {
					out.PerGiB = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PerGiB).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV34(out *jwriter.Writer, in Price) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"per_hour\":"
		out.RawString(prefix[1:])
		if in.PerHour == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PerHour).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"per_gib\":"
		out.RawString(prefix)
		if in.PerGiB == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PerGiB).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Price) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Price) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Price) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Price) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV34(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV35(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "continent":
			out.Continent = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "city":
			out.City = string(in.String())
		case "asn":
			out.ASN = int(in.Int())
		case "isp":
			out.ISP = string(in.String())
		case "ip_type":
			out.IPType = IPType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV35(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Continent != "" {
		const prefix string = ",\"continent\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Continent))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.ASN != 0 {
		const prefix string = ",\"asn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ASN))
	}
	if in.ISP != "" {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ISP))
	}
	if in.IPType != "" {
		const prefix string = ",\"ip_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV35(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV36(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "definition":
			if in.IsNull() {
				in.Skip()
				out.Definition = nil
			} else {
				if out.Definition == nil {
					out.Definition = new(json.RawMessage)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Definition).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV36(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"definition\":"
		out.RawString(prefix)
		if in.Definition == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Definition).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV36(l, v)
}
func easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV37(in *jlexer.Lexer, out *AccessPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "source":
			out.Source = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV37(out *jwriter.Writer, in AccessPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAd058f64EncodeGithubComMysteriumnetworkDiscoveryProposalV37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAd058f64DecodeGithubComMysteriumnetworkDiscoveryProposalV37(l, v)
}
